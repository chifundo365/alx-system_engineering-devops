#!/usr/bin/env bash
# configures nginx server to run on port 80


function install() {
	if [ "$(command -v "$1")" ]; then
		echo -e "$1 is installed\n"
	else
		echo -e "$1 is not installed.."
		echo -e "installing..............\n"
		sudo apt-get update -qq -y && \
			sudo apt-get install -qq -y "$1"
		echo "$1 installed!!"
	fi
}

# install nginx if not installed
install nginx

# stop any process listening on port 80
s=$(sudo netstat -tulnp | grep :80 | awk '{print $7}' | cut -d'/' -f2 | cut -d':' -f1 | sort -u)

if [ "$s" ]; then
	echo "$s runningi on port 80 ...."
	
	if [ "$s" != "nginx" ]; then
		echo -e "\t stopping it\n"
		sudo service "$s" stop
	fi
fi


#shellcheck disable=SC2154
server="\
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# http://wiki.nginx.org/Pitfalls
# http://wiki.nginx.org/QuickStart
# http://wiki.nginx.org/Configuration
#
# Generally, you will want to move this file somewhere, and start with a clean
# file but keep this around for reference. Or just disable in sites-enabled.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

# Default server configuration
#
server {
        listen 80 default_server;
        listen [::]:80 default_server;

        # SSL configuration
        #
        # listen 443 ssl default_server;
        # listen [::]:443 ssl default_server;
        #
        # Note: You should disable gzip for SSL traffic.
        # See: https://bugs.debian.org/773332
        #
        # Read up on ssl_ciphers to ensure a secure configuration.
        # See: https://bugs.debian.org/765782
        #
        # Self signed certs generated by the ssl-cert package
        # Don't use them in a production server!
        #
        # include snippets/snakeoil.conf;

        root /var/www/html;

        # Add index.php to the list if you are using PHP
        index index.html index.htm index.nginx-debian.html;

        server_name _;

        location / {
                # First attempt to serve request as file, then
                # as directory, then fall back to displaying a 404.
                try_files $uri $uri/ =404;
        }

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #       include snippets/fastcgi-php.conf;
        #
        #       # With php7.0-cgi alone:
        #       fastcgi_pass 127.0.0.1:9000;
        #       # With php7.0-fpm:
        #       fastcgi_pass unix:/run/php/php7.0-fpm.sock;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #       deny all;
        #}
}


# Virtual Host configuration for example.com
#
# You can move that to a different file under sites-available/ and symlink that
# to sites-enabled/ to enable it.
#
#server {
#       listen 80;
#       listen [::]:80;
#
#       server_name example.com;
#
#       root /var/www/example.com;
#       index index.html;
#
#       location / {
#               try_files $uri $uri/ =404;
#       }
#}

"
# create a backup of /etc/nginx/sites-available/default
echo -e "heere"
sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/defaut.bkcp > /dev/null

# overwrite the conf. file 
echo "$server" | sudo tee /etc/nginx/sites-available/default > /dev/null

function state() {
	if [ "$(sudo service "$1" status)" ]; then
		sudo service "$1" start
	else
		sudo service "$1" restart
	fi
}

state nginx

echo -e "Done!!!"
